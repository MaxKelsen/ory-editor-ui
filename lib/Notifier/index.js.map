{"version":3,"sources":["../../src/Notifier/index.js"],"names":["dismissedMobilePreviewKey","handleDismiss","updateSetting","id","Notifier","dismissed","open","action","message","t","mapStateToProps","state","props","mapActionsToProps"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,gEAA4B,0BAAlC;;AAcP,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,aAAD,EAA0BC,EAA1B;AAAA,SAAyC;AAAA,WAC7DD,4BAA0BC,EAA1B,EAAgC,IAAhC,CAD6D;AAAA,GAAzC;AAAA,CAAtB;;AAGA,IAAMC,WAAW,SAAXA,QAAW;AAAA,MACfC,SADe,QACfA,SADe;AAAA,MAEfF,EAFe,QAEfA,EAFe;AAAA,MAGfG,IAHe,QAGfA,IAHe;AAAA,yBAIfC,MAJe;AAAA,MAIfA,MAJe,+BAIN,SAJM;AAAA,MAKfC,OALe,QAKfA,OALe;AAAA,MAMfN,aANe,QAMfA,aANe;AAAA,SAQf;AACE,UAAMI,QAAQ,CAACD,SADjB;AAEE,YAAQE,MAFV;AAGE,aAAS,eAAKE,CAAL,CAAOD,OAAP,CAHX;AAIE,sBAAkBP,cAAcC,aAAd,EAA6BC,EAA7B,CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARe;AAAA,CAAjB;;AAgBA,IAAMO,kBAAkB,wCAAyB;AAC/CL,aAAW,mBAACM,KAAD,EAAgBC,KAAhB;AAAA,WACT,wCAAuBA,MAAMT,EAA7B,EAAmCQ,KAAnC,CADS;AAAA;AADoC,CAAzB,CAAxB;;AAKA,IAAME,oBAAoB;AACxBX;AADwB,CAA1B;;kBAIe,yBAAQQ,eAAR,EAAyBG,iBAAzB,EAA4CT,QAA5C,C","file":"index.js","sourcesContent":["// @flow\nimport React from 'react'\nimport Snackbar from 'material-ui/Snackbar'\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { updateSetting } from 'ory-editor-core/lib/actions/setting'\nimport { getSetting } from 'ory-editor-core/lib/selector/setting'\nimport i18n from 'ory-editor-core/lib/service/i18n'\n\nexport const dismissedMobilePreviewKey = 'mobile-preview-dismissed'\n\ntype Props = {\n  updateSetting: Function,\n  getSetting: Function,\n\n  id: string,\n  open: boolean,\n  action: string,\n  message: string,\n\n  dismissed: boolean\n}\n\nconst handleDismiss = (updateSetting: Function, id: string) => () =>\n  updateSetting(`notifier.${id}`, true)\n\nconst Notifier = ({\n  dismissed,\n  id,\n  open,\n  action = 'dismiss',\n  message,\n  updateSetting\n}: Props) => (\n  <Snackbar\n    open={open && !dismissed}\n    action={action}\n    message={i18n.t(message)}\n    onActionTouchTap={handleDismiss(updateSetting, id)}\n  />\n)\n\nconst mapStateToProps = createStructuredSelector({\n  dismissed: (state: Object, props: Props) =>\n    getSetting(`notifier.${props.id}`)(state)\n})\n\nconst mapActionsToProps = {\n  updateSetting\n}\n\nexport default connect(mapStateToProps, mapActionsToProps)(Notifier)\n"]}